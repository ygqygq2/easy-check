name: Release

concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

on:
  push:
    tags:
      - 'v*' # 仅匹配以 "v" 开头的标签，例如 v1.0.0
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  packages: write
  attestations: write

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    env:
      flags: ""

    steps:
      - name: Not tags
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: echo "flags=--snapshot" >> $GITHUB_ENV

      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置 Go 环境
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'

      # 设置缓存以加速构建
      - name: Cache Go modules
        id: cache-go
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # 安装 pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      # node 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      # 安装前端依赖
      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile
        working-directory: frontend

      # 构建前端
      - name: Build frontend
        run: pnpm build
        working-directory: frontend

      # 安装依赖
      - name: Install dependencies
        if: steps.cache-go.outputs.cache-hit != 'true'
        run: |
          go mod tidy
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # wails 环境确认
      - name: Wails check
        run: wails doctor

      # 构建项目
      - name: Build project
        run: make build

      # - name: Run GoReleaser
      #   timeout-minutes: 60
      #   uses: goreleaser/goreleaser-action@v6
      #   with:
      #     version: latest
      #     args: release --clean ${{ env.flags }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        run: |
          # 使用sed命令提取最新的版本记录
          cat CHANGELOG.md | awk '/^# \[/ {if (flag) exit; flag=1} flag {print}' > body.md

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          artifacts: '*.zip'
          bodyFile: 'body.md'
