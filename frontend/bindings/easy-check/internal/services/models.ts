// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * AppInfo 应用程序信息结构体
 */
export class AppInfo {
    /**
     * 应用名称
     */
    "appName": string;

    /**
     * 应用版本
     */
    "appVersion": string;

    /**
     * 作者
     */
    "author": string;

    /**
     * 版权信息
     */
    "copyright": string;

    /**
     * 许可证
     */
    "license": string;

    /**
     * 代码仓库
     */
    "repository": string;

    /**
     * 应用描述
     */
    "description": string;

    /**
     * Go版本
     */
    "goVersion": string;

    /**
     * 平台信息
     */
    "platformInfo": PlatformInfo;

    /**
     * 更新服务器
     */
    "updateServer": string;

    /**
     * 是否需要重启
     */
    "needsRestart": boolean;

    /** Creates a new AppInfo instance. */
    constructor($$source: Partial<AppInfo> = {}) {
        if (!("appName" in $$source)) {
            this["appName"] = "";
        }
        if (!("appVersion" in $$source)) {
            this["appVersion"] = "";
        }
        if (!("author" in $$source)) {
            this["author"] = "";
        }
        if (!("copyright" in $$source)) {
            this["copyright"] = "";
        }
        if (!("license" in $$source)) {
            this["license"] = "";
        }
        if (!("repository" in $$source)) {
            this["repository"] = "";
        }
        if (!("description" in $$source)) {
            this["description"] = "";
        }
        if (!("goVersion" in $$source)) {
            this["goVersion"] = "";
        }
        if (!("platformInfo" in $$source)) {
            this["platformInfo"] = (new PlatformInfo());
        }
        if (!("updateServer" in $$source)) {
            this["updateServer"] = "";
        }
        if (!("needsRestart" in $$source)) {
            this["needsRestart"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): AppInfo {
        const $$createField8_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("platformInfo" in $$parsedSource) {
            $$parsedSource["platformInfo"] = $$createField8_0($$parsedSource["platformInfo"]);
        }
        return new AppInfo($$parsedSource as Partial<AppInfo>);
    }
}

/**
 * FrontendConfig 前端需要的配置信息结构体
 */
export class FrontendConfig {
    /**
     * ping间隔时间
     */
    "pingInterval": number;

    /**
     * 全局间隔时间
     */
    "globalInterval": number;

    /**
     * 主机数量
     */
    "hostsCount": number;

    /** Creates a new FrontendConfig instance. */
    constructor($$source: Partial<FrontendConfig> = {}) {
        if (!("pingInterval" in $$source)) {
            this["pingInterval"] = 0;
        }
        if (!("globalInterval" in $$source)) {
            this["globalInterval"] = 0;
        }
        if (!("hostsCount" in $$source)) {
            this["hostsCount"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new FrontendConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): FrontendConfig {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new FrontendConfig($$parsedSource as Partial<FrontendConfig>);
    }
}

/**
 * PlatformInfo 平台信息结构体
 */
export class PlatformInfo {
    /**
     * 操作系统
     */
    "os": string;

    /**
     * 架构
     */
    "arch": string;

    /** Creates a new PlatformInfo instance. */
    constructor($$source: Partial<PlatformInfo> = {}) {
        if (!("os" in $$source)) {
            this["os"] = "";
        }
        if (!("arch" in $$source)) {
            this["arch"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PlatformInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): PlatformInfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PlatformInfo($$parsedSource as Partial<PlatformInfo>);
    }
}

// Private type creation functions
const $$createType0 = PlatformInfo.createFrom;
