// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * AppService struct
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as constants$0 from "../constants/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as types$0 from "../types/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as application$0 from "../../../github.com/wailsapp/wails/v3/pkg/application/models.js";

/**
 * CheckForUpdates checks for updates
 */
export function CheckForUpdates(): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2701935820) as any;
    return $resultPromise;
}

/**
 * GetConfig retrieves the configuration file content
 */
export function GetConfig(): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1500926409) as any;
    return $resultPromise;
}

export function GetCurrentInstanceInfo(): Promise<{ [_: string]: any }> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3707045995) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetHosts retrieves the list of hosts
 */
export function GetHosts(page: number, pageSize: number, searchTerm: string): Promise<types$0.HostsResponse | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2747365634, page, pageSize, searchTerm) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType2($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetLatencyWithHosts retrieves latency data for hosts
 */
export function GetLatencyWithHosts(hosts: string[]): Promise<types$0.HostsLatencyResponse | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2388114338, hosts) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType4($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetSharedConstant retrieves shared constants
 */
export function GetSharedConstant(): Promise<constants$0.SharedConstants | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2539832674) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType6($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * RestartApp restarts the application
 */
export function RestartApp(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(579549339) as any;
    return $resultPromise;
}

/**
 * SaveConfig saves the configuration file content
 */
export function SaveConfig(content: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3220636282, content) as any;
    return $resultPromise;
}

/**
 * Shutdown is called when the service shuts down
 */
export function ServiceShutdown(options: application$0.ServiceOptions): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3322109826, options) as any;
    return $resultPromise;
}

/**
 * Startup is called when the service starts
 */
export function ServiceStartup(options: application$0.ServiceOptions): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1326445753, options) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = $Create.Map($Create.Any, $Create.Any);
const $$createType1 = types$0.HostsResponse.createFrom;
const $$createType2 = $Create.Nullable($$createType1);
const $$createType3 = types$0.HostsLatencyResponse.createFrom;
const $$createType4 = $Create.Nullable($$createType3);
const $$createType5 = constants$0.SharedConstants.createFrom;
const $$createType6 = $Create.Nullable($$createType5);
